Tests run on Fri Apr 11 19:02:05 UTC 2025

Decompressing your archive...
tar: vsopcompiler/semantic_analyzer.cpp: time stamp 2025-04-11 19:18:44 is 998.191767728 s in the future
tar: vsopcompiler: time stamp 2025-04-11 19:21:35 is 1169.189925496 s in the future
Entering vsopcompiler folder...
Installing build tools...
If this fails because of an invalid Realease file in the future, please tell us about it !
nothing to do
Building your VSOP compiler...
g++ -std=c++17 -Wall -Wextra -I. -c AST.cpp -o AST.o
bison -d -v -o parser.cpp parser.y
g++ -std=c++17 -Wall -Wextra -I. -c parser.cpp -o parser.o
flex -o lexer.cpp lexer.l
g++ -std=c++17 -Wall -Wextra -I. -c lexer.cpp -o lexer.o
lexer.cpp:1664:17: warning: 'void yyunput(int, char*)' defined but not used [-Wunused-function]
 1664 |     static void yyunput (int c, char * yy_bp )
      |                 ^~~~~~~
g++ -std=c++17 -Wall -Wextra -I. -o vsopc AST.o parser.o lexer.o
Your VSOP compiler seems to have been built successfully. We will now
proceed to some basic conformance tests of your lexer.

Please note that the tests are not exhaustive, and full success on the
tests does not mean your lexer is perfect. You are responsible for
testing your lexer. Write your own tests!

If a test fails, this script will output the corresponding VSOP code,
the expected output, and your compiler output. We will only report this
information for the first few failed tests, however.

Note that as the e-mail transfer is destroying many non-printable
characters, the files are printed with 'cat -v', i.e. "\r" is replaced
by "^M", "\f" by "^L", etc.

As you were free to design your own error messages, and we did not specified
what you should do after a lexical error (e.g. stop, continue just after the
faulty token, try to resynchronize on a likely token start, etc.), this script
will only check error messages up to the "<FILENAME>:<LINE>:<COL>: lexical
error", and will stop both error and output processing after the first error.

If you think the expected output is wrong, and your compiler is correct, double
check the VSOP manual and the wording. If, after that, you still think you are
correct and we are wrong, report it to the teaching assistant.

If the script crashes, report it to the teaching assistant.

01-decimal-numbers.vsop... PASS
02-whitespace.vsop... PASS
03-single-line-comments.vsop... PASS
04-multiline-comments.vsop... PASS
05-hex-numbers.vsop... PASS
06-keywords.vsop... PASS
07-type-identifiers.vsop... PASS
08-object-identifiers.vsop... PASS
09-basic-strings.vsop... PASS
10-strings-with-escapes.vsop... PASS
11-multiline-string.vsop... PASS
12-comment-in-string.vsop... PASS
13-operators.vsop... PASS
14-eof-after-decimal-number.vsop... PASS
15-eof-after-object-identifier.vsop... PASS
16-eof-after-string.vsop... PASS
17-eof-after-keyword.vsop... PASS
18-eof-after-comment.vsop... PASS
19-MyClass-example.vsop... PASS
20-factorial-example.vsop... PASS
21-list-example.vsop... PASS
22-unterminated-comment.vsop... PASS
23-unterminated-nested-comment.vsop... PASS
24-wrong-decimal-number.vsop... PASS
25-incomplete-hex-number.vsop... PASS
26-wrong-hex-number.vsop... PASS
27-number-followed-by-operator.vsop... PASS
28-invalid-lf-in-string.vsop... PASS
29-unterminated-string.vsop... PASS
30-unterminated-multiline-string.vsop... PASS
31-unknown-escape-sequence.vsop... PASS
32-string-ends-in-backslash.vsop... PASS
33-string-ends-in-backslash-x.vsop... PASS
34-string-ends-in-backslash-x-3.vsop... PASS
35-wrong-backslash-x-escape.vsop... PASS
36-illegal-char-dollar.vsop... PASS
37-illegal-char-tilde.vsop... PASS
38-illegal-char-exclamation-mark.vsop... PASS
39-illegal-char-rbracket.vsop... PASS

lexer-tests: passed 39 tests out of 39.
Congratulations!

Now moving on to syntax analysis tests. Remember that exact error message
locations are not checked, but only the occurrence of errors. If input is
valid, your program should exit with return code 0, and only output on stdout.
Your AST dump will be checked against the one from the reference
implementation (ignoring spaces and newlines). If input is invalid, this script
only checks that your program returns with something different than 0, and
prints a syntax error on stderr.

Once again, if you think your compiler is right, and ours wrong, report it to
the teaching assistant.

Found tests folder. Testing *.vsop files inside it against reference compiler.

Entering vsopcompiler/tests...
fact.vsop... PASS
keys.vsop... PASS
statement_ex.vsop... PASS
test2.vsop... PASS
test3.vsop... PASS
test4.vsop... PASS
test5.vsop... PASS
test6.vsop... PASS
test7.vsop... PASS
test8.vsop... PASS
testArgsNotClosed.vsop... PASS
testCyclicInhiretence.vsop... PASS
testInvalidType.vsop... PASS
testLET1.vsop... PASS
testLET2.vsop... PASS
testListExample.vsop... PASS
testMethodWithoutBody.vsop... PASS
testWrongIF.vsop... PASS
testWrongIF_ELSE.vsop... PASS
testWrongIF_ONLY.vsop... PASS
testWrongIF_THEN.vsop... PASS
testWrongLET1.vsop... PASS
testWrongLET2.vsop... PASS
testWrongLET3.vsop... PASS
testWrongLET4.vsop... PASS
testWrongObjIden1.vsop... PASS
testWrongWHILE.vsop... PASS
testWrongWHILE_2.vsop... PASS
testWrongWHILE_WITHOUT8DO.vsop... PASS
test_if.vsop... PASS
test_if_else.vsop... PASS

vsopcompiler/tests: passed 31 tests out of 31.
Congratulations!

Entering syntax-tests...
01-empty-class.vsop... PASS
02-two-empty-classes.vsop... PASS
03-empty-parent.vsop... PASS
04-uninitialized-field.vsop... PASS
05-initialized-field.vsop... PASS
06-method-no-args.vsop... PASS
07-method-one-arg.vsop... PASS
08-method-many-args.vsop... PASS
09-field-and-method.vsop... PASS
10-fields-and-methods-in-order.vsop... PASS
11-fields-and-methods-interleaved.vsop... PASS
12-simple-if-then.vsop... PASS
13-simple-if-then-else.vsop... PASS
14-dangling-else-1.vsop... PASS
15-dangling-else-2.vsop... PASS
16-imbricated-if-then-else.vsop... PASS
17-while.vsop... PASS
18-let-uninitialized.vsop... PASS
19-let-initialized.vsop... PASS
20-lets.vsop... PASS
21-simple-assign.vsop... PASS
22-tricky-assign.vsop... PASS
23-log-expr.vsop... PASS
24-arith-expr.vsop... PASS
25-log-arith-expr.vsop... PASS
26-isnull.vsop... PASS
27-calls.vsop... PASS
28-mixed-calls.vsop... PASS
29-block-init.vsop... PASS
30-new.vsop... PASS
31-MyClass-example.vsop... PASS
32-factorial-example.vsop... PASS
33-list-example.vsop... PASS
34-field-no-semicolon.vsop... PASS
35-wrong-class-name.vsop... PASS
36-field-misses-type.vsop... PASS
37-field-uppercase.vsop... PASS
38-method-lowercase.vsop... PASS
39-method-no-args.vsop... PASS
40-method-misses-type.vsop... PASS
41-surnumeral-semicolon.vsop... PASS
42-method-no-braces.vsop... PASS
43-missing-closing-brace.vsop... PASS
44-uppercase-keyword.vsop... PASS
45-field-through-self.vsop... PASS
46-bare-field.vsop... PASS
47-bare-method.vsop... PASS
48-class-in-class.vsop... PASS
49-extends-many-1.vsop... PASS
50-extends-many-2.vsop... PASS
51-block-miss-braces.vsop... PASS
54-self-field.vsop... PASS
55-self-arg.vsop... PASS
56-self-var.vsop... PASS
57-assign-to-self.vsop... PASS

syntax-tests: passed 55 tests out of 55.
Congratulations!

Now moving on to semantic analysis tests. Remember that exact error
message locations are not checked, but only the occurrence of errors. If
input is valid, your program should exit with return code 0, and only
output on stdout. Your typed AST dump will be checked against the one
from the reference implementation (ignoring spaces and newlines). If
input is invalid, this script only checks that your program return with
something different than 0, and prints something on stderr.

Once again, if you think your compiler is right, and ours wrong, report
it to the teaching assistant.

Found tests folder. Testing *.vsop files inside it against reference compiler.

Entering vsopcompiler/tests...
fact.vsop... FAIL

Your compiler detected an error, but input was valid.

Here is the input file:
----------------- 8< -----------------
class Main {
    factorial(n : int32) : int32 {
        if n <= 2 then 1
        else n * factorial(n - 1)
    }

    main() : int32 {
        print("Enter an integer greater-than or equal to 0: ");
        let n : int32 <- inputInt32() in
        if n < 0 then {
            print("Error: number must be greater-than or equal to 0.\n");
            -1
        } else {
            print("The factorial of ").printInt32(n).print(" is ");
            printInt32(factorial(n)).print("\n");
            0
        }
    }
}----------------- 8< -----------------

Here is your program's error output:
----------------- 8< -----------------
fact.vsop:15:24: semantic error: method 'factorial' not found in class hierarchy of 'main'.
fact.vsop:0:0: semantic error: method 'printInt32' expects argument of type 'int32', but got type 'Undefined_return_type'.
fact.vsop:0:0: semantic error: method 'inputInt32' expects 1 argument, but 0 were provided.
fact.vsop:9:13: semantic error: the type of let 'int32' must be the same as its Initializer, found :Undefined_return_type
fact.vsop:4:18: semantic error: method 'factorial' not found in class hierarchy of 'factorial'.
fact.vsop:0:0: semantic error: Binary operation requires int32 operands, but found *(int32,Undefined_return_type)
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(Main, Object, [],
   [Method(factorial, [n : int32], int32,
      [If(BinOp(<=, n : int32, 2 : int32) : bool, 1 : int32,
         BinOp(*, n : int32,
           Call(self : Main, factorial,
             [BinOp(-, n : int32, 1 : int32) : int32])
           : int32)
         : int32)
       : int32]
      : int32),
    Method(main, [], int32,
      [Call(self : Main, print,
         ["Enter an integer greater-than or equal to 0: " : string])
       : Object,
       Let(n, int32, Call(self : Main, inputInt32, []) : int32,
         If(BinOp(<, n : int32, 0 : int32) : bool,
           [Call(self : Main, print,
              ["Error: number must be greater-than or equal to 0.\x0a"
               : string])
            : Object, UnOp(-, 1 : int32) : int32]
           : int32,
           [Call(
              Call(Call(self : Main, print, ["The factorial of " : string])
                : Object, printInt32, [n : int32])
              : Object, print, [" is " : string])
            : Object,
            Call(
              Call(self : Main, printInt32,
                [Call(self : Main, factorial, [n : int32]) : int32])
              : Object, print, ["\x0a" : string])
            : Object, 0 : int32]
           : int32)
         : int32)
       : int32]
      : int32)])]
----------------- 8< -----------------

keys.vsop... PASS
statement_ex.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class List {
    isNil() : bool { true }
    length() : int32 { 0 }
}
(* Nil is nothing more than a glorified alias to List *)
class Nil extends List { }

class Cons extends List {
    head : int32;
    tail : List;
    init(hd : int32, tl : List) : Cons {
        head <- hd;
        tail <- tl;
        self
    }

    head() : int32 { head }
    isNil() : bool { false }
    length() : int32 { 1 + tail.length() }
}
class Main {
    main() : int32 {
        let xs : List <- (new Cons).init(0, (new Cons).init(
        1, (new Cons).init(
        2, new Nil))) in {
            print("List has length ");
            printInt32(xs.length());
            print("\n");
            0
        }
    }
}----------------- 8< -----------------

test2.vsop... PASS
test3.vsop... PASS
test4.vsop... PASS
test5.vsop... PASS
test6.vsop... PASS
test7.vsop... PASS
test8.vsop... PASS
testArgsNotClosed.vsop... PASS
testCyclicInhiretence.vsop... PASS
testInvalidType.vsop... PASS
testLET1.vsop... PASS
testLET2.vsop... PASS
testListExample.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class List {
    isNil() : bool { true }
    length() : int32 { 0 }
}
(* Nil is nothing more than a glorified alias to List *)
class Nil extends List { }

class Cons extends List {
    head : int32;
    tail : List;
    init(hd : int32, tl : List) : Cons {
        head <- hd;
        tail <- tl;
        self
    }

    head() : int32 { head }
    isNil() : bool { false }
    length() : int32 { 1 + tail.length() }
}
class Main {
    main() : int32 {
        let xs : List <- (new Cons).init(0, (new Cons).init(
        1, (new Cons).init(
        2, new Nil))) in {
            print("List has length ");
            printInt32(xs.length());
            print("\n");
            0
        }
    }
}----------------- 8< -----------------

testMethodWithoutBody.vsop... PASS
testWrongIF.vsop... PASS
testWrongIF_ELSE.vsop... PASS
testWrongIF_ONLY.vsop... PASS
testWrongIF_THEN.vsop... PASS
testWrongLET1.vsop... PASS
testWrongLET2.vsop... PASS
testWrongLET3.vsop... PASS
testWrongLET4.vsop... PASS
testWrongObjIden1.vsop... PASS
testWrongWHILE.vsop... PASS
testWrongWHILE_2.vsop... PASS
testWrongWHILE_WITHOUT8DO.vsop... PASS
test_if.vsop... PASS
test_if_else.vsop... PASS

vsopcompiler/tests: passed 28 tests out of 31.
Still some work to do!
First, tests used for automated grading.

Entering semantic-eval-tests...
01-simplest-program.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

02-field-lit-bool.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : bool <- true;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

03-field-lit-string.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    veryOriginal : string <- "Hello, world!";
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

04-field-no-init-int32.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : int32;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

05-overridden-method.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class GrandParent {
    i(j : int32) : int32 { j + 42 }
}
class Parent extends GrandParent {
}
class Child extends Parent {
    i(j : int32) : int32 { j * 42 }
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

06-field-if-then.vsop... FAIL
07-field-let.vsop... FAIL
08-field-unary-minus.vsop... FAIL
09-field-equal-int32.vsop... FAIL
10-field-equal-same-class.vsop... FAIL
11-field-lt.vsop... FAIL
12-field-call-args.vsop... FAIL
13-field-new-direct.vsop... FAIL
14-field-block.vsop... FAIL
15-method-if.vsop... FAIL
16-method-while.vsop... FAIL
17-method-assign.vsop... FAIL
18-method-isnull.vsop... FAIL
19-method-equal-bool.vsop... FAIL
20-method-and.vsop... FAIL
21-method-call-no-args.vsop... FAIL
22-method-call-inherited.vsop... FAIL
23-method-new-indirect.vsop... FAIL
24-method-local-var.vsop... FAIL
25-method-class-var.vsop... FAIL
26-method-parent-class-var.vsop... FAIL
27-field-method-name.vsop... FAIL
28-inheritance.vsop... FAIL
29-io.vsop... FAIL
30-shadowing.vsop... FAIL
31-factorial-example.vsop... FAIL
32-list-example.vsop... FAIL
33-class-redef.vsop... PASS
34-object-redef.vsop... PASS
35-undef-parent-class.vsop... PASS
36-undef-field-type.vsop... PASS
37-undef-init-type.vsop... FAIL
38-undef-new-type.vsop... PASS
39-direct-cycle.vsop... PASS
40-indirect-cycle.vsop... PASS
41-redef-class-field.vsop... FAIL
42-redef-inherited-field.vsop... FAIL
43-redef-class-method.vsop... FAIL
44-wrong-overridden-method.vsop... FAIL
45-field-if-no-else.vsop... FAIL
46-field-if-mismatch.vsop... FAIL
47-field-while-wrong-cond.vsop... FAIL
48-field-assign-unbound.vsop... FAIL
49-field-assign-wrong-type.vsop... FAIL
50-field-isnull-wrong-operand.vsop... FAIL
51-field-equal-uncomparable.vsop... FAIL
52-field-equal-wrong-type.vsop... FAIL
53-field-and-wrong-operand.vsop... FAIL
54-field-lt-wrong-operand.vsop... FAIL
55-field-add-wrong-operand.vsop... FAIL
56-field-unknown-method.vsop... FAIL
57-field-call-arity.vsop... FAIL
58-field-call-wrong-arg.vsop... FAIL
59-field-call-wrong-type.vsop... FAIL
60-field-new-wrong-type.vsop... FAIL
61-unbound-var.vsop... FAIL
62-field-wrong-type-var.vsop... FAIL
63-field-wrong-type-block.vsop... FAIL
64-method-if-no-else.vsop... FAIL
65-method-while-wrong-type.vsop... FAIL
66-method-pow-wrong-operand.vsop... PASS
67-method-unknown-method.vsop... PASS
68-method-arg-redef.vsop... PASS
69-field-in-field.vsop... FAIL
70-method-in-field.vsop... FAIL
71-no-Main.vsop... PASS
72-wrong-main-args.vsop... PASS
73-wrong-main-type.vsop... PASS
74-static-vs-dynamic.vsop... PASS
75-method-invalid-block.vsop... PASS
76-main-in-other-class.vsop... FAIL
77-declaration-order.vsop... FAIL
78-field-after-method.vsop... FAIL
79-another-cycle.vsop... PASS

semantic-eval-tests: passed 16 tests out of 79.
Still some work to do!
Additional semantic tests (ungraded)

Entering semantic-other-tests...
001-field-lit-bool.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : bool <- false;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

002-field-lit-int32.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : int32 <- 42;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

003-field-lit-unit.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    veryUseful : unit <- ();
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

004-field-no-init-unit.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    veryUseful : unit;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

005-field-if.vsop... FAIL

Your compiler exited with an error code (i.e. not zero), but no error
message was printed to standard error.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : int32 <- if true then 42 else 0;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

006-field-if.vsop... FAIL
007-field-if.vsop... FAIL
008-field-while.vsop... FAIL
009-field-assign.vsop... FAIL
010-field-isnull.vsop... FAIL
011-field-equal-bool.vsop... FAIL
012-field-equal-string.vsop... FAIL
013-field-equal-unit.vsop... FAIL
014-field-and.vsop... FAIL
015-field-le.vsop... FAIL
016-field-call-no-args.vsop... FAIL
017-field-call-one-arg.vsop... FAIL
018-field-call-inherited.vsop... FAIL
019-field-new-indirect.vsop... FAIL
020-field-new-indirect.vsop... FAIL
021-field-local-var.vsop... FAIL
022-field-block.vsop... FAIL
023-field-block.vsop... FAIL
024-method-lit-bool.vsop... FAIL
025-method-lit-bool.vsop... FAIL
026-method-lit-int32.vsop... FAIL
027-method-lit-string.vsop... FAIL
028-method-lit-unit.vsop... FAIL
029-method-if-then.vsop... FAIL
030-method-if.vsop... FAIL
031-method-if.vsop... FAIL
032-method-let.vsop... FAIL
033-method-unary-minus.vsop... FAIL
034-method-equal-int32.vsop... FAIL
035-method-equal-string.vsop... FAIL
036-method-equal-unit.vsop... FAIL
037-method-equal-same-class.vsop... FAIL
038-method-lt.vsop... FAIL
039-method-le.vsop... FAIL
040-method-call-one-arg.vsop... FAIL
041-method-call-args.vsop... FAIL
042-method-new-direct.vsop... FAIL
043-method-new-indirect.vsop... FAIL
044-method-block.vsop... FAIL
045-method-block.vsop... FAIL
046-method-block.vsop... FAIL
047-MyClass.vsop... FAIL
048-undef-formal-type.vsop... FAIL
049-undef-ret-type.vsop... FAIL
050-undef-let-type.vsop... PASS
051-wrong-overridden-method.vsop... FAIL
052-wrong-overridden-method.vsop... FAIL
053-field-if-wrong-cond.vsop... FAIL
054-field-if-wrong-type.vsop... FAIL
055-field-while-wrong-type.vsop... FAIL
056-field-let-wrong-type.vsop... FAIL
057-field-assign-wrong-type.vsop... FAIL
058-field-uminus-wrong-operand.vsop... FAIL
059-field-uminus-wrong-type.vsop... FAIL
060-field-isnull-wrong-type.vsop... FAIL
061-field-equal-uncomparable.vsop... FAIL
062-field-equal-uncomparable.vsop... FAIL
063-field-equal-uncomparable.vsop... FAIL
064-field-and-wrong-operand.vsop... FAIL
065-field-and-wrong-type.vsop... FAIL
066-field-lt-wrong-operand.vsop... FAIL
067-field-lt-wrong-type.vsop... FAIL
068-field-le-wrong-operand.vsop... FAIL
069-field-le-wrong-operand.vsop... FAIL
070-field-le-wrong-type.vsop... FAIL
071-field-add-wrong-operand.vsop... FAIL
072-field-add-wrong-type.vsop... FAIL
073-field-sub-wrong-operand.vsop... FAIL
074-field-sub-wrong-operand.vsop... FAIL
075-field-sub-wrong-type.vsop... FAIL
076-field-mul-wrong-operand.vsop... FAIL
077-field-mul-wrong-operand.vsop... FAIL
078-field-mul-wrong-type.vsop... FAIL
079-field-div-wrong-operand.vsop... FAIL
080-field-div-wrong-operand.vsop... FAIL
081-field-div-wrong-type.vsop... FAIL
082-field-pow-wrong-operand.vsop... FAIL
083-field-pow-wrong-operand.vsop... FAIL
084-field-pow-wrong-type.vsop... FAIL
085-field-new-wrong-type.vsop... FAIL
086-field-new-wrong-type.vsop... FAIL
087-field-wrong-type-var.vsop... FAIL
088-field-wrong-type-var.vsop... FAIL
089-field-wrong-type-block.vsop... FAIL
090-field-wrong-type-block.vsop... FAIL
091-method-type.vsop... FAIL
092-method.vsop... FAIL
093-method-if-mismatch.vsop... PASS
094-method-if-wrong-cond.vsop... PASS
095-method-if-wrong-type.vsop... FAIL
096-method-while-wrong-cond.vsop... PASS
097-method-let-wrong-type.vsop... FAIL
098-method-assign-unbound.vsop... PASS
099-method-assign-wrong-type.vsop... PASS
100-method-assign-wrong-type.vsop... FAIL
101-method-uminus-wrong-operand.vsop... FAIL
102-method-uminus-wrong-type.vsop... FAIL
103-method-isnull-wrong-operand.vsop... FAIL
104-method-isnull-wrong-type.vsop... FAIL
105-method-equal-uncomparable.vsop... PASS
106-method-equal-uncomparable.vsop... PASS
107-method-equal-uncomparable.vsop... PASS
108-method-equal-uncomparable.vsop... PASS
109-method-equal-wrong-type.vsop... FAIL
110-method-and-wrong-operand.vsop... PASS
111-method-and-wrong-operand.vsop... PASS
112-method-and-wrong-type.vsop... FAIL
113-method-lt-wrong-operand.vsop... PASS
114-method-lt-wrong-operand.vsop... PASS
115-method-lt-wrong-type.vsop... FAIL
116-method-le-wrong-operand.vsop... PASS
117-method-le-wrong-operand.vsop... PASS
118-method-le-wrong-type.vsop... FAIL
119-method-add-wrong-operand.vsop... PASS
120-method-add-wrong-operand.vsop... PASS
121-method-add-wrong-type.vsop... FAIL
122-method-sub-wrong-operand.vsop... PASS
123-method-sub-wrong-operand.vsop... PASS
124-method-sub-wrong-type.vsop... FAIL
125-method-mul-wrong-operand.vsop... PASS
126-method-mul-wrong-operand.vsop... PASS
127-method-mul-wrong-type.vsop... FAIL
128-method-div-wrong-operand.vsop... PASS
129-method-div-wrong-operand.vsop... PASS
130-method-div-wrong-type.vsop... FAIL
131-method-pow-wrong-operand.vsop... PASS
132-method-pow-wrong-type.vsop... FAIL
133-method-call-arity.vsop... PASS
134-method-call-wrong-arg.vsop... PASS
135-method-call-wrong-type.vsop... FAIL
136-method-new-wrong-type.vsop... FAIL
137-method-new-wrong-type.vsop... FAIL
138-method-new-wrong-type.vsop... PASS
139-method-wrong-type-var.vsop... FAIL
140-method-wrong-type-var.vsop... FAIL
141-method-wrong-type-var.vsop... FAIL
142-method-wrong-type-block.vsop... FAIL
143-method-wrong-type-block.vsop... FAIL
144-method-wrong-type-block.vsop... FAIL
145-method-arg-redef.vsop... PASS
146-field-in-field.vsop... FAIL
147-method-in-field.vsop... FAIL
148-field-invalid-block.vsop... FAIL
149-return-child.vsop... FAIL

semantic-other-tests: passed 29 tests out of 149.
Still some work to do!