Tests run on Sat Apr 12 13:35:17 UTC 2025

Decompressing your archive...
tar: vsopcompiler/tests/fact.vsop_tempo: time stamp 2025-04-12 13:37:31 is 133.826648205 s in the future
tar: vsopcompiler/AST.cpp: time stamp 2025-04-12 13:37:49 is 151.82475395 s in the future
tar: vsopcompiler: time stamp 2025-04-12 13:37:53 is 155.824402235 s in the future
Entering vsopcompiler folder...
Installing build tools...
If this fails because of an invalid Realease file in the future, please tell us about it !
nothing to do
Building your VSOP compiler...
make: Warning: File 'AST.cpp' has modification time 150 s in the future
g++ -std=c++17 -Wall -Wextra -I. -c AST.cpp -o AST.o
bison -d -v -o parser.cpp parser.y
g++ -std=c++17 -Wall -Wextra -I. -c parser.cpp -o parser.o
flex -o lexer.cpp lexer.l
g++ -std=c++17 -Wall -Wextra -I. -c lexer.cpp -o lexer.o
lexer.cpp:1664:17: warning: 'void yyunput(int, char*)' defined but not used [-Wunused-function]
 1664 |     static void yyunput (int c, char * yy_bp )
      |                 ^~~~~~~
g++ -std=c++17 -Wall -Wextra -I. -o vsopc AST.o parser.o lexer.o
make: warning:  Clock skew detected.  Your build may be incomplete.
Your VSOP compiler seems to have been built successfully. We will now
proceed to some basic conformance tests of your lexer.

Please note that the tests are not exhaustive, and full success on the
tests does not mean your lexer is perfect. You are responsible for
testing your lexer. Write your own tests!

If a test fails, this script will output the corresponding VSOP code,
the expected output, and your compiler output. We will only report this
information for the first few failed tests, however.

Note that as the e-mail transfer is destroying many non-printable
characters, the files are printed with 'cat -v', i.e. "\r" is replaced
by "^M", "\f" by "^L", etc.

As you were free to design your own error messages, and we did not specified
what you should do after a lexical error (e.g. stop, continue just after the
faulty token, try to resynchronize on a likely token start, etc.), this script
will only check error messages up to the "<FILENAME>:<LINE>:<COL>: lexical
error", and will stop both error and output processing after the first error.

If you think the expected output is wrong, and your compiler is correct, double
check the VSOP manual and the wording. If, after that, you still think you are
correct and we are wrong, report it to the teaching assistant.

If the script crashes, report it to the teaching assistant.

01-decimal-numbers.vsop... PASS
02-whitespace.vsop... PASS
03-single-line-comments.vsop... PASS
04-multiline-comments.vsop... PASS
05-hex-numbers.vsop... PASS
06-keywords.vsop... PASS
07-type-identifiers.vsop... PASS
08-object-identifiers.vsop... PASS
09-basic-strings.vsop... PASS
10-strings-with-escapes.vsop... PASS
11-multiline-string.vsop... PASS
12-comment-in-string.vsop... PASS
13-operators.vsop... PASS
14-eof-after-decimal-number.vsop... PASS
15-eof-after-object-identifier.vsop... PASS
16-eof-after-string.vsop... PASS
17-eof-after-keyword.vsop... PASS
18-eof-after-comment.vsop... PASS
19-MyClass-example.vsop... PASS
20-factorial-example.vsop... PASS
21-list-example.vsop... PASS
22-unterminated-comment.vsop... PASS
23-unterminated-nested-comment.vsop... PASS
24-wrong-decimal-number.vsop... PASS
25-incomplete-hex-number.vsop... PASS
26-wrong-hex-number.vsop... PASS
27-number-followed-by-operator.vsop... PASS
28-invalid-lf-in-string.vsop... PASS
29-unterminated-string.vsop... PASS
30-unterminated-multiline-string.vsop... PASS
31-unknown-escape-sequence.vsop... PASS
32-string-ends-in-backslash.vsop... PASS
33-string-ends-in-backslash-x.vsop... PASS
34-string-ends-in-backslash-x-3.vsop... PASS
35-wrong-backslash-x-escape.vsop... PASS
36-illegal-char-dollar.vsop... PASS
37-illegal-char-tilde.vsop... PASS
38-illegal-char-exclamation-mark.vsop... PASS
39-illegal-char-rbracket.vsop... PASS

lexer-tests: passed 39 tests out of 39.
Congratulations!

Now moving on to syntax analysis tests. Remember that exact error message
locations are not checked, but only the occurrence of errors. If input is
valid, your program should exit with return code 0, and only output on stdout.
Your AST dump will be checked against the one from the reference
implementation (ignoring spaces and newlines). If input is invalid, this script
only checks that your program returns with something different than 0, and
prints a syntax error on stderr.

Once again, if you think your compiler is right, and ours wrong, report it to
the teaching assistant.

Found tests folder. Testing *.vsop files inside it against reference compiler.

Entering vsopcompiler/tests...
fact.vsop... PASS
keys.vsop... PASS
statement_ex.vsop... PASS
test2.vsop... PASS
test3.vsop... PASS
test4.vsop... PASS
test5.vsop... PASS
test6.vsop... PASS
test7.vsop... PASS
test8.vsop... PASS
testArgsNotClosed.vsop... PASS
testCyclicInhiretence.vsop... PASS
testInvalidType.vsop... PASS
testLET1.vsop... PASS
testLET2.vsop... PASS
testListExample.vsop... PASS
testMethodWithoutBody.vsop... PASS
testWrongIF.vsop... PASS
testWrongIF_ELSE.vsop... PASS
testWrongIF_ONLY.vsop... PASS
testWrongIF_THEN.vsop... PASS
testWrongLET1.vsop... PASS
testWrongLET2.vsop... PASS
testWrongLET3.vsop... PASS
testWrongLET4.vsop... PASS
testWrongObjIden1.vsop... PASS
testWrongWHILE.vsop... PASS
testWrongWHILE_2.vsop... PASS
testWrongWHILE_WITHOUT8DO.vsop... PASS
test_if.vsop... PASS
test_if_else.vsop... FAIL

An error was expected, but your compiler returned with 0, 
indicating success.

Here is the input file:
----------------- 8< -----------------
----------------- 8< -----------------

Here is the expected error output:
----------------- 8< -----------------
test_if_else.vsop:1:1: syntax error.
----------------- 8< -----------------


vsopcompiler/tests: passed 30 tests out of 31.
Still some work to do!

Entering syntax-tests...
01-empty-class.vsop... PASS
02-two-empty-classes.vsop... PASS
03-empty-parent.vsop... PASS
04-uninitialized-field.vsop... PASS
05-initialized-field.vsop... PASS
06-method-no-args.vsop... PASS
07-method-one-arg.vsop... PASS
08-method-many-args.vsop... PASS
09-field-and-method.vsop... PASS
10-fields-and-methods-in-order.vsop... PASS
11-fields-and-methods-interleaved.vsop... PASS
12-simple-if-then.vsop... PASS
13-simple-if-then-else.vsop... PASS
14-dangling-else-1.vsop... PASS
15-dangling-else-2.vsop... PASS
16-imbricated-if-then-else.vsop... PASS
17-while.vsop... PASS
18-let-uninitialized.vsop... PASS
19-let-initialized.vsop... PASS
20-lets.vsop... PASS
21-simple-assign.vsop... PASS
22-tricky-assign.vsop... PASS
23-log-expr.vsop... PASS
24-arith-expr.vsop... PASS
25-log-arith-expr.vsop... PASS
26-isnull.vsop... PASS
27-calls.vsop... PASS
28-mixed-calls.vsop... PASS
29-block-init.vsop... PASS
30-new.vsop... PASS
31-MyClass-example.vsop... PASS
32-factorial-example.vsop... PASS
33-list-example.vsop... PASS
34-field-no-semicolon.vsop... PASS
35-wrong-class-name.vsop... PASS
36-field-misses-type.vsop... PASS
37-field-uppercase.vsop... PASS
38-method-lowercase.vsop... PASS
39-method-no-args.vsop... PASS
40-method-misses-type.vsop... PASS
41-surnumeral-semicolon.vsop... PASS
42-method-no-braces.vsop... PASS
43-missing-closing-brace.vsop... PASS
44-uppercase-keyword.vsop... PASS
45-field-through-self.vsop... PASS
46-bare-field.vsop... PASS
47-bare-method.vsop... PASS
48-class-in-class.vsop... PASS
49-extends-many-1.vsop... PASS
50-extends-many-2.vsop... PASS
51-block-miss-braces.vsop... PASS
54-self-field.vsop... PASS
55-self-arg.vsop... PASS
56-self-var.vsop... PASS
57-assign-to-self.vsop... PASS

syntax-tests: passed 55 tests out of 55.
Congratulations!

Now moving on to semantic analysis tests. Remember that exact error
message locations are not checked, but only the occurrence of errors. If
input is valid, your program should exit with return code 0, and only
output on stdout. Your typed AST dump will be checked against the one
from the reference implementation (ignoring spaces and newlines). If
input is invalid, this script only checks that your program return with
something different than 0, and prints something on stderr.

Once again, if you think your compiler is right, and ours wrong, report
it to the teaching assistant.

Found tests folder. Testing *.vsop files inside it against reference compiler.

Entering vsopcompiler/tests...
fact.vsop... PASS
keys.vsop... PASS
statement_ex.vsop... FAIL

Your compiler detected an error, but input was valid.

Here is the input file:
----------------- 8< -----------------
class List {
    isNil() : bool { true }
    length() : int32 { 0 }
}
(* Nil is nothing more than a glorified alias to List *)
class Nil extends List { }

class Cons extends List {
    head : int32;
    tail : List;
    init(hd : int32, tl : List) : Cons {
        head <- hd;
        tail <- tl;
        self
    }

    head() : int32 { head }
    isNil() : bool { false }
    length() : int32 { 1 + tail.length() }
}
class Main {
    main() : int32 {
        let xs : List <- (new Cons).init(0, (new Cons).init(
        1, (new Cons).init(
        2, new Nil))) in {
            print("List has length ");
            printInt32(xs.length());
            print("\n");
            0
        }
    }
}----------------- 8< -----------------

Here is your program's error output:
----------------- 8< -----------------
statement_ex.vsop:22:5: semantic error: Method 'main' return type does not match the block return type'List'
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(List, Object, [],
   [Method(isNil, [], bool, [true : bool] : bool),
    Method(length, [], int32, [0 : int32] : int32)]),
 Class(Nil, List, [], []),
 Class(Cons, List, [Field(head, int32), Field(tail, List)],
   [Method(init, [hd : int32, tl : List], Cons,
      [Assign(head, hd : int32) : int32, Assign(tail, tl : List) : List, self
       : Cons]
      : Cons),
    Method(head, [], int32, [head : int32] : int32),
    Method(isNil, [], bool, [false : bool] : bool),
    Method(length, [], int32,
      [BinOp(+, 1 : int32, Call(tail : List, length, []) : int32) : int32]
      : int32)]),
 Class(Main, Object, [],
   [Method(main, [], int32,
      [Let(xs, List,
         Call(New(Cons) : Cons, init,
           [0 : int32,
            Call(New(Cons) : Cons, init,
              [1 : int32,
               Call(New(Cons) : Cons, init, [2 : int32, New(Nil) : Nil])
               : Cons])
            : Cons])
         : Cons,
         [Call(self : Main, print, ["List has length " : string]) : Object,
          Call(self : Main, printInt32, [Call(xs : List, length, []) : int32])
          : Object, Call(self : Main, print, ["\x0a" : string]) : Object, 0
          : int32]
         : int32)
       : int32]
      : int32)])]
----------------- 8< -----------------

test2.vsop... PASS
test3.vsop... PASS
test4.vsop... PASS
test5.vsop... PASS
test6.vsop... PASS
test7.vsop... PASS
test8.vsop... PASS
testArgsNotClosed.vsop... PASS
testCyclicInhiretence.vsop... PASS
testInvalidType.vsop... PASS
testLET1.vsop... PASS
testLET2.vsop... PASS
testListExample.vsop... FAIL

Your compiler detected an error, but input was valid.

Here is the input file:
----------------- 8< -----------------
class List {
    isNil() : bool { true }
    length() : int32 { 0 }
}
(* Nil is nothing more than a glorified alias to List *)
class Nil extends List { }

class Cons extends List {
    head : int32;
    tail : List;
    init(hd : int32, tl : List) : Cons {
        head <- hd;
        tail <- tl;
        self
    }

    head() : int32 { head }
    isNil() : bool { false }
    length() : int32 { 1 + tail.length() }
}
class Main {
    main() : int32 {
        let xs : List <- (new Cons).init(0, (new Cons).init(
        1, (new Cons).init(
        2, new Nil))) in {
            print("List has length ");
            printInt32(xs.length());
            print("\n");
            0
        }
    }
}----------------- 8< -----------------

Here is your program's error output:
----------------- 8< -----------------
testListExample.vsop:22:5: semantic error: Method 'main' return type does not match the block return type'List'
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(List, Object, [],
   [Method(isNil, [], bool, [true : bool] : bool),
    Method(length, [], int32, [0 : int32] : int32)]),
 Class(Nil, List, [], []),
 Class(Cons, List, [Field(head, int32), Field(tail, List)],
   [Method(init, [hd : int32, tl : List], Cons,
      [Assign(head, hd : int32) : int32, Assign(tail, tl : List) : List, self
       : Cons]
      : Cons),
    Method(head, [], int32, [head : int32] : int32),
    Method(isNil, [], bool, [false : bool] : bool),
    Method(length, [], int32,
      [BinOp(+, 1 : int32, Call(tail : List, length, []) : int32) : int32]
      : int32)]),
 Class(Main, Object, [],
   [Method(main, [], int32,
      [Let(xs, List,
         Call(New(Cons) : Cons, init,
           [0 : int32,
            Call(New(Cons) : Cons, init,
              [1 : int32,
               Call(New(Cons) : Cons, init, [2 : int32, New(Nil) : Nil])
               : Cons])
            : Cons])
         : Cons,
         [Call(self : Main, print, ["List has length " : string]) : Object,
          Call(self : Main, printInt32, [Call(xs : List, length, []) : int32])
          : Object, Call(self : Main, print, ["\x0a" : string]) : Object, 0
          : int32]
         : int32)
       : int32]
      : int32)])]
----------------- 8< -----------------

testMethodWithoutBody.vsop... PASS
testWrongIF.vsop... PASS
testWrongIF_ELSE.vsop... PASS
testWrongIF_ONLY.vsop... PASS
testWrongIF_THEN.vsop... PASS
testWrongLET1.vsop... PASS
testWrongLET2.vsop... PASS
testWrongLET3.vsop... PASS
testWrongLET4.vsop... PASS
testWrongObjIden1.vsop... PASS
testWrongWHILE.vsop... PASS
testWrongWHILE_2.vsop... PASS
testWrongWHILE_WITHOUT8DO.vsop... PASS
test_if.vsop... PASS
test_if_else.vsop... PASS

vsopcompiler/tests: passed 29 tests out of 31.
Still some work to do!
First, tests used for automated grading.

Entering semantic-eval-tests...
01-simplest-program.vsop... PASS
02-field-lit-bool.vsop... PASS
03-field-lit-string.vsop... PASS
04-field-no-init-int32.vsop... PASS
05-overridden-method.vsop... PASS
06-field-if-then.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : unit <- if true then ();
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(MyClass, Object, [Field(myField, unit, If(true : bool, () : unit) : Undefined_return_type)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(MyClass, Object,
   [Field(myField, unit, If(true : bool, () : unit) : unit)], []),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

07-field-let.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : int32 <- let x : int32 <- 42 in x;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(MyClass, Object, [Field(myField, int32, Let(x, int32, 42 : int32, x : x): int32)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(MyClass, Object,
   [Field(myField, int32, Let(x, int32, 42 : int32, x : int32) : int32)], [
   ]),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

08-field-unary-minus.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : int32 <- let x : int32 <- 42 in -x;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(MyClass, Object, [Field(myField, int32, Let(x, int32, 42 : int32, UnOp(-, x : x) : Undefined_return_type): int32)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(MyClass, Object,
   [Field(myField, int32,
      Let(x, int32, 42 : int32, UnOp(-, x : int32) : int32) : int32)],
   []),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

09-field-equal-int32.vsop... PASS
10-field-equal-same-class.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class A { }
class MyClass {
    myField : bool <- (new A) = (new A);
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(A, Object, [], []), 
Class(MyClass, Object, [Field(myField, bool, BinOp(=, New(A) : , New(A) : ) : bool)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(A, Object, [], []),
 Class(MyClass, Object,
   [Field(myField, bool, BinOp(=, New(A) : A, New(A) : A) : bool)], [
   ]),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

11-field-lt.vsop... PASS
12-field-call-args.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class A {
    select(i : int32, j : int32, b : bool) : int32 {
        if b then i
        else j
    }
}
class B {
    getTheTruth() : bool { true }
}
class MyClass {
    myField : int32 <- (new A).select(0, 42, (new B).getTheTruth());
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(A, Object, [], 
	[Method(select, [i : int32, j : int32, b : bool], int32, 
	[If(b : bool, i : int32, j : int32) : int32] : int32)]), 
Class(B, Object, [], 
	[Method(getTheTruth, [], bool, 
	[true : bool] : bool)]), 
Class(MyClass, Object, [Field(myField, int32, Call(New(A) : , select, [0 : int32, 42 : int32, Call(New(B) : , getTheTruth, []) : Undefined_return_type]) : Undefined_return_type)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(A, Object, [],
   [Method(select, [i : int32, j : int32, b : bool], int32,
      [If(b : bool, i : int32, j : int32) : int32] : int32)]),
 Class(B, Object, [], [Method(getTheTruth, [], bool, [true : bool] : bool)]),
 Class(MyClass, Object,
   [Field(myField, int32,
      Call(New(A) : A, select,
        [0 : int32, 42 : int32, Call(New(B) : B, getTheTruth, []) : bool])
      : int32)],
   []),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

13-field-new-direct.vsop... FAIL
14-field-block.vsop... FAIL
15-method-if.vsop... PASS
16-method-while.vsop... PASS
17-method-assign.vsop... FAIL
18-method-isnull.vsop... PASS
19-method-equal-bool.vsop... FAIL
20-method-and.vsop... PASS
21-method-call-no-args.vsop... PASS
22-method-call-inherited.vsop... PASS
23-method-new-indirect.vsop... FAIL
24-method-local-var.vsop... PASS
25-method-class-var.vsop... PASS
26-method-parent-class-var.vsop... PASS
27-field-method-name.vsop... PASS
28-inheritance.vsop... PASS
29-io.vsop... FAIL
30-shadowing.vsop... FAIL
31-factorial-example.vsop... PASS
32-list-example.vsop... FAIL
33-class-redef.vsop... PASS
34-object-redef.vsop... PASS
35-undef-parent-class.vsop... PASS
36-undef-field-type.vsop... PASS
37-undef-init-type.vsop... FAIL
38-undef-new-type.vsop... PASS
39-direct-cycle.vsop... PASS
40-indirect-cycle.vsop... PASS
41-redef-class-field.vsop... FAIL
42-redef-inherited-field.vsop... FAIL
43-redef-class-method.vsop... FAIL
44-wrong-overridden-method.vsop... FAIL
45-field-if-no-else.vsop... FAIL
46-field-if-mismatch.vsop... FAIL
47-field-while-wrong-cond.vsop... FAIL
48-field-assign-unbound.vsop... FAIL
49-field-assign-wrong-type.vsop... FAIL
50-field-isnull-wrong-operand.vsop... FAIL
51-field-equal-uncomparable.vsop... FAIL
52-field-equal-wrong-type.vsop... FAIL
53-field-and-wrong-operand.vsop... FAIL
54-field-lt-wrong-operand.vsop... FAIL
55-field-add-wrong-operand.vsop... FAIL
56-field-unknown-method.vsop... FAIL
57-field-call-arity.vsop... FAIL
58-field-call-wrong-arg.vsop... FAIL
59-field-call-wrong-type.vsop... FAIL
60-field-new-wrong-type.vsop... FAIL
61-unbound-var.vsop... FAIL
62-field-wrong-type-var.vsop... FAIL
63-field-wrong-type-block.vsop... FAIL
64-method-if-no-else.vsop... FAIL
65-method-while-wrong-type.vsop... PASS
66-method-pow-wrong-operand.vsop... PASS
67-method-unknown-method.vsop... PASS
68-method-arg-redef.vsop... PASS
69-field-in-field.vsop... FAIL
70-method-in-field.vsop... FAIL
71-no-Main.vsop... PASS
72-wrong-main-args.vsop... PASS
73-wrong-main-type.vsop... PASS
74-static-vs-dynamic.vsop... PASS
75-method-invalid-block.vsop... PASS
76-main-in-other-class.vsop... PASS
77-declaration-order.vsop... PASS
78-field-after-method.vsop... PASS
79-another-cycle.vsop... PASS

semantic-eval-tests: passed 39 tests out of 79.
Still some work to do!
Additional semantic tests (ungraded)

Entering semantic-other-tests...
001-field-lit-bool.vsop... PASS
002-field-lit-int32.vsop... PASS
003-field-lit-unit.vsop... PASS
004-field-no-init-unit.vsop... PASS
005-field-if.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : int32 <- if true then 42 else 0;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(MyClass, Object, [Field(myField, int32, If(true : bool, 42 : int32, 0 : int32) : Undefined_return_type)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(MyClass, Object,
   [Field(myField, int32, If(true : bool, 42 : int32, 0 : int32) : int32)],
   []),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

006-field-if.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : unit <- if true then () else ();
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(MyClass, Object, [Field(myField, unit, If(true : bool, () : unit, () : unit) : Undefined_return_type)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(MyClass, Object,
   [Field(myField, unit, If(true : bool, () : unit, () : unit) : unit)], [
   ]),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

007-field-if.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class GrandParent {
}
class Parent extends GrandParent {
}
class Child extends Parent {
}
class MyClass {
    myField : Parent <- if true then new Child else new Parent;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(GrandParent, Object, [], []), 
Class(Parent, GrandParent, [], []), 
Class(Child, Parent, [], []), 
Class(MyClass, Object, [Field(myField, Parent, If(true : bool, New(Child) : , New(Parent) : ) : Undefined_return_type)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(GrandParent, Object, [], []), Class(Parent, GrandParent, [], []),
 Class(Child, Parent, [], []),
 Class(MyClass, Object,
   [Field(myField, Parent,
      If(true : bool, New(Child) : Child, New(Parent) : Parent) : Parent)],
   []),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

008-field-while.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : unit <- while false do 42;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(MyClass, Object, [Field(myField, unit, While(false : bool, 42 : int32) : Undefined_return_type)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(MyClass, Object,
   [Field(myField, unit, While(false : bool, 42 : int32) : unit)], []),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

009-field-assign.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    myField : int32 <- let x : int32 in x <- 42;
}
class Main { main() : int32 { 0 } }
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(MyClass, Object, [Field(myField, int32, Let(x, int32, Assign(x, 42 : int32) : Undefined_return_type) : int32)], []), 
Class(Main, Object, [], 
	[Method(main, [], int32, 
	[0 : int32] : int32)])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(MyClass, Object,
   [Field(myField, int32, Let(x, int32, Assign(x, 42 : int32) : int32)
      : int32)],
   []),
 Class(Main, Object, [], [Method(main, [], int32, [0 : int32] : int32)])]
----------------- 8< -----------------

010-field-isnull.vsop... FAIL
011-field-equal-bool.vsop... FAIL
012-field-equal-string.vsop... PASS
013-field-equal-unit.vsop... FAIL
014-field-and.vsop... PASS
015-field-le.vsop... PASS
016-field-call-no-args.vsop... FAIL
017-field-call-one-arg.vsop... FAIL
018-field-call-inherited.vsop... FAIL
019-field-new-indirect.vsop... FAIL
020-field-new-indirect.vsop... FAIL
021-field-local-var.vsop... FAIL
022-field-block.vsop... FAIL
023-field-block.vsop... FAIL
024-method-lit-bool.vsop... PASS
025-method-lit-bool.vsop... PASS
026-method-lit-int32.vsop... PASS
027-method-lit-string.vsop... PASS
028-method-lit-unit.vsop... PASS
029-method-if-then.vsop... PASS
030-method-if.vsop... PASS
031-method-if.vsop... PASS
032-method-let.vsop... PASS
033-method-unary-minus.vsop... PASS
034-method-equal-int32.vsop... PASS
035-method-equal-string.vsop... FAIL
036-method-equal-unit.vsop... FAIL
037-method-equal-same-class.vsop... FAIL
038-method-lt.vsop... PASS
039-method-le.vsop... PASS
040-method-call-one-arg.vsop... PASS
041-method-call-args.vsop... PASS
042-method-new-direct.vsop... PASS
043-method-new-indirect.vsop... FAIL
044-method-block.vsop... PASS
045-method-block.vsop... PASS
046-method-block.vsop... PASS
047-MyClass.vsop... PASS
048-undef-formal-type.vsop... FAIL
049-undef-ret-type.vsop... PASS
050-undef-let-type.vsop... PASS
051-wrong-overridden-method.vsop... FAIL
052-wrong-overridden-method.vsop... FAIL
053-field-if-wrong-cond.vsop... FAIL
054-field-if-wrong-type.vsop... FAIL
055-field-while-wrong-type.vsop... FAIL
056-field-let-wrong-type.vsop... FAIL
057-field-assign-wrong-type.vsop... FAIL
058-field-uminus-wrong-operand.vsop... FAIL
059-field-uminus-wrong-type.vsop... FAIL
060-field-isnull-wrong-type.vsop... FAIL
061-field-equal-uncomparable.vsop... FAIL
062-field-equal-uncomparable.vsop... FAIL
063-field-equal-uncomparable.vsop... FAIL
064-field-and-wrong-operand.vsop... FAIL
065-field-and-wrong-type.vsop... FAIL
066-field-lt-wrong-operand.vsop... FAIL
067-field-lt-wrong-type.vsop... FAIL
068-field-le-wrong-operand.vsop... FAIL
069-field-le-wrong-operand.vsop... FAIL
070-field-le-wrong-type.vsop... FAIL
071-field-add-wrong-operand.vsop... FAIL
072-field-add-wrong-type.vsop... FAIL
073-field-sub-wrong-operand.vsop... FAIL
074-field-sub-wrong-operand.vsop... FAIL
075-field-sub-wrong-type.vsop... FAIL
076-field-mul-wrong-operand.vsop... FAIL
077-field-mul-wrong-operand.vsop... FAIL
078-field-mul-wrong-type.vsop... FAIL
079-field-div-wrong-operand.vsop... FAIL
080-field-div-wrong-operand.vsop... FAIL
081-field-div-wrong-type.vsop... FAIL
082-field-pow-wrong-operand.vsop... FAIL
083-field-pow-wrong-operand.vsop... FAIL
084-field-pow-wrong-type.vsop... FAIL
085-field-new-wrong-type.vsop... FAIL
086-field-new-wrong-type.vsop... FAIL
087-field-wrong-type-var.vsop... FAIL
088-field-wrong-type-var.vsop... FAIL
089-field-wrong-type-block.vsop... FAIL
090-field-wrong-type-block.vsop... FAIL
091-method-type.vsop... PASS
092-method.vsop... FAIL
093-method-if-mismatch.vsop... PASS
094-method-if-wrong-cond.vsop... PASS
095-method-if-wrong-type.vsop... PASS
096-method-while-wrong-cond.vsop... PASS
097-method-let-wrong-type.vsop... PASS
098-method-assign-unbound.vsop... PASS
099-method-assign-wrong-type.vsop... PASS
100-method-assign-wrong-type.vsop... PASS
101-method-uminus-wrong-operand.vsop... PASS
102-method-uminus-wrong-type.vsop... PASS
103-method-isnull-wrong-operand.vsop... FAIL
104-method-isnull-wrong-type.vsop... PASS
105-method-equal-uncomparable.vsop... PASS
106-method-equal-uncomparable.vsop... PASS
107-method-equal-uncomparable.vsop... PASS
108-method-equal-uncomparable.vsop... PASS
109-method-equal-wrong-type.vsop... PASS
110-method-and-wrong-operand.vsop... PASS
111-method-and-wrong-operand.vsop... PASS
112-method-and-wrong-type.vsop... PASS
113-method-lt-wrong-operand.vsop... PASS
114-method-lt-wrong-operand.vsop... PASS
115-method-lt-wrong-type.vsop... PASS
116-method-le-wrong-operand.vsop... PASS
117-method-le-wrong-operand.vsop... PASS
118-method-le-wrong-type.vsop... PASS
119-method-add-wrong-operand.vsop... PASS
120-method-add-wrong-operand.vsop... PASS
121-method-add-wrong-type.vsop... PASS
122-method-sub-wrong-operand.vsop... PASS
123-method-sub-wrong-operand.vsop... PASS
124-method-sub-wrong-type.vsop... PASS
125-method-mul-wrong-operand.vsop... PASS
126-method-mul-wrong-operand.vsop... PASS
127-method-mul-wrong-type.vsop... PASS
128-method-div-wrong-operand.vsop... PASS
129-method-div-wrong-operand.vsop... PASS
130-method-div-wrong-type.vsop... PASS
131-method-pow-wrong-operand.vsop... PASS
132-method-pow-wrong-type.vsop... PASS
133-method-call-arity.vsop... PASS
134-method-call-wrong-arg.vsop... PASS
135-method-call-wrong-type.vsop... PASS
136-method-new-wrong-type.vsop... PASS
137-method-new-wrong-type.vsop... PASS
138-method-new-wrong-type.vsop... PASS
139-method-wrong-type-var.vsop... PASS
140-method-wrong-type-var.vsop... PASS
141-method-wrong-type-var.vsop... PASS
142-method-wrong-type-block.vsop... PASS
143-method-wrong-type-block.vsop... PASS
144-method-wrong-type-block.vsop... PASS
145-method-arg-redef.vsop... PASS
146-field-in-field.vsop... FAIL
147-method-in-field.vsop... FAIL
148-field-invalid-block.vsop... FAIL
149-return-child.vsop... FAIL

semantic-other-tests: passed 82 tests out of 149.
Still some work to do!